# Importa as bibliotecas necess√°rias
import gradio as gr
from transformers import pipeline
import re

# Token Hugging Face para autentica√ß√£o no modelo
hf_token = "seu_token" # n√£o esquecer de preencher com seu token gerado 

# Carrega o modelo de sumariza√ß√£o BART-large-cnn
summarizer = pipeline("summarization", model="facebook/bart-large-cnn", token=hf_token)

# Fun√ß√£o para limpar o texto (remove rodap√©s, espa√ßamentos desnecess√°rios, etc.)
def limpar_texto(texto):
    texto_limpo = re.sub(r"(Back\s+to\s+.*?)+", "", texto, flags=re.IGNORECASE)
    texto_limpo = re.sub(r"\s{2,}", " ", texto_limpo)
    return texto_limpo.strip()

# Fun√ß√£o para contar o n√∫mero de palavras
def contar_palavras(texto):
    return len(texto.split())

# Fun√ß√£o principal de resumo
def resumir_texto(texto):
    if not texto.strip():
        return "Por favor, insira um texto v√°lido.", "", ""
    
    # Limpa o texto
    texto_limpo = limpar_texto(texto)
    palavras_original = contar_palavras(texto_limpo)

    # Realiza a sumariza√ß√£o
    resultado = summarizer(texto_limpo, max_length=300, min_length=150, do_sample=False)
    resumo = resultado[0]['summary_text']
    palavras_resumo = contar_palavras(resumo)

    return f"{palavras_original} palavras", f"{palavras_resumo} palavras", resumo

# Cria√ß√£o da interface gr√°fica com Gradio
interface = gr.Interface(
    fn=resumir_texto,
    inputs=gr.Textbox(lines=10, placeholder="Digite ou cole aqui o texto que deseja resumir..."),
    outputs=[
        gr.Textbox(label="üìÑ Palavras no texto original"),
        gr.Textbox(label="üìù Palavras no resumo"),
        gr.Textbox(label="üìå Resumo gerado"),
    ],
    title="Resumidor de Textos em ingl√™s üìù",
    description="Cole um texto e veja o resumo junto com a contagem de palavras! (Limite recomendado: at√© 850 palavras)",
)

# Lan√ßa a interface
interface.launch()
